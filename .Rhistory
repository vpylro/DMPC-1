library(dplyr)
packageVersion("dplyr")
library(microbiome
)
packageVersion("microbiome")
library(phyloseq)
packageVersion("phyloseq")
library(plyr)
packageVersion("plyr")
library(randomForest)
packageVersion("randomForests")
packageVersion("randomForest")
library(vegan)
packageVersion("vegan")
document()
library(roxygen2)
library(devtools)
document()
document()
document()
document()
library(DMPC)
library(DMPC)
DMPC.OOB.error
library(DMPC)
DMPC.OOB.error(a)
devtools::load_all(".")
library(DMPC)
devtools::load_all(".")
uninstall("DMPC")
library("DMPC", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
detach("package:DMPC", unload=TRUE)
remove.packages("DMPC", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
library(DMPC)
library(magrittr)
%>%
%>%
R version
version
setwd("..")
install("DMPC")
library(DMPC)
document(DMPC)
library(DMPC)
search()
packrat::init(project = '~/Desktop/packagePrevCut/DMPC', options = list(use.cache = TRUE, external.packages = c("phyloseq", "microbiome", "dplyr", "plyr", "vegan", "randomForests")))
packrat::init(project = '~/Desktop/packagePrevCut/DMPC', options = list(external.packages = c("phyloseq", "microbiome", "vegan", "plyr", "dplyr", "randomForest")))
detach("package:ggplot2", unload=TRUE)
detach("package:lattice", unload=TRUE)
detach("package:microbiome", unload=TRUE)
detach("package:permute", unload=TRUE)
detach("package:phyloseq", unload=TRUE)
detach("package:plyr", unload=TRUE)
detach("package:randomForest", unload=TRUE)
detach("package:roxygen2", unload=TRUE)
library("roxygen2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
detach("package:vegan", unload=TRUE)
detach("package:datasets", unload=TRUE)
detach("package:graphics", unload=TRUE)
library(DMPC)
detach("package:DMPC", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:lattice", unload=TRUE)
detach("package:microbiome", unload=TRUE)
detach("package:permute", unload=TRUE)
detach("package:phyloseq", unload=TRUE)
detach("package:grDevices", unload=TRUE)
document()
document(DMPC)
library(DMPC)
document("DMPC")
version
library(DMPC)
library(DMPC)
remove.packages("DMPC", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("~/Desktop/packagePrevCut/DMPC_0.1.0.tar.gz", repos = NULL, type = "source")
library(DMPC)
seqtab = readRDS("/home/prisciladobbler/Desktop/mentalHealth/seqtab.rds")
taxa = readRDS("/home/prisciladobbler/Desktop/mentalHealth/taxa.rds")
map <- "/home/prisciladobbler/Desktop/mentalHealth/Bruce_Stevens_mapping.txt"
ps <- phyloseq(otu_table(seqtab, taxa_are_rows=FALSE),
tax_table(taxa))
sample_metadata = import_qiime_sample_data(map)
saliva =merge_phyloseq(ps, sample_metadata)
saliva
summarize_phyloseq(saliva)
rank_names(saliva)
set.seed(2125)
inputR = rarefy_even_depth(saliva, sample.size = 21000)
DMPC.OOB.error(inputR, "Treatment")
d=DMPC.split.by.variable(inputR, "Treatment")
d
DMPC.prevalence(d)
e=DMPC.prevalence(d)
a=DMPC.best.prevalence(e, "Treatment")
a
library(devtools)
use_testthat("DMPC")
library(DMPC)
use_testthat("DMPC")
use_testthat("DMPC")
use_testthat(DMPC)
library(DMPC)
use_testthat("DMPC")
use_testthat()
document()
install.packages("available")
use_package("phyloseq")
use_package("microbiome")
use_package("vegan")
use_package("randomForest")
use_package("plyr")
document()
library(DMPC)
install.packages("randomForest")
library(DMPC)
document()
library(devtools)
document()
library(DMPC)
jsonbiomfile = "/home/prisciladobbler/Desktop/packagePrevCut/otu_table_tax.biom"
mapfile = "/home/prisciladobbler/Desktop/packagePrevCut/map.txt"
map = import_qiime_sample_data(mapfile)
library(phyloseq)
biom = import_biom(jsonbiomfile, mapfile, parseFunction= parse_taxonomy_default)
map = import_qiime_sample_data(mapfile)
input = merge_phyloseq(biom,map)
sample_names(map)
sample_names(biom)
mapfile = "/home/prisciladobbler/Desktop/packagePrevCut/map.txt"
map = import_qiime_sample_data(mapfile)
input = merge_phyloseq(biom,map)
any(taxa_sums(input) == 0)
sample_sums(input)
inputR = rarefy_even_depth(input, sample.size = 9500)
load("/home/prisciladobbler/R/x86_64-pc-linux-gnu-library/3.4/phyloseq/data/enterotype.RData")
library(phyloseq)
jsonbiomfile = "/home/prisciladobbler/Desktop/banheiros/otu_table.biom"
mapfile = "/home/prisciladobbler/Desktop/banheiros/map.txt"
biom = import_biom(jsonbiomfile, mapfile, parseFunction= parse_taxonomy_default)
map = import_qiime_sample_data(mapfile)
input = merge_phyloseq(biom,map)
any(taxa_sums(input) == 0)
sort(sample_sums(input))
input=filter_taxa(input, function(x) sum(x)>5,TRUE)
set.seed(2125)
inputR = rarefy_even_depth(input, sample.size = 500)
rm(input)
rm(biom)
library(DMPC)
DMPC.OOB.error(inputR, "Environment")
split=DMPC.split.by.variable(inputR,"Environment")
split
prevalences=DMPC.prevalence(split)
prevalences
DMPC.best.prevalence(prevalences, "Environment")
library(phyloseq)
jsonbiomfile = "/home/prisciladobbler/Desktop/banheiros/otu_table.biom"
mapfile = "/home/prisciladobbler/Desktop/banheiros/map2.txt"
biom = import_biom(jsonbiomfile, mapfile, parseFunction= parse_taxonomy_default)
library(phyloseq)
jsonbiomfile = "/home/prisciladobbler/Desktop/banheiros/otu_table.biom"
mapfile = "/home/prisciladobbler/Desktop/banheiros/map2.txt"
biom = import_biom(jsonbiomfile, mapfile, parseFunction= parse_taxonomy_default)
map = import_qiime_sample_data(mapfile)
input = merge_phyloseq(biom,map)
any(taxa_sums(input) == 0)
sort(sample_sums(input))
input=filter_taxa(input, function(x) sum(x)>5,TRUE)
mapfile = "/home/prisciladobbler/Desktop/packagePrevCut/map2.txt"
map = import_qiime_sample_data(mapfile)
input = merge_phyloseq(biom,map)
any(taxa_sums(input) == 0)
sort(sample_sums(input))
input=filter_taxa(input, function(x) sum(x)>5,TRUE)
sort(sample_sums(input))
set.seed(2125)
inputR = rarefy_even_depth(input, sample.size = 500)
library(DMPC)
rm(biom)
DMPC.OOB.error(inputR, "Environment")
split=DMPC.split.by.variable(inputR,"Environment")
split
prevalences=DMPC.prevalence(split)
prevalences
DMPC.best.prevalence(prevalences, "Environment")
rm(input,map,prevalences,split)
rm(jsonbiomfile,mapfile)
restroom=inputR
rm(inputR)
save.image("~/Desktop/packagePrevCut/DMPC/data/restroom.RData")
library(devtools)
document()
use_data()
checkRdaFiles()
tools::checkRdaFiles()
library(roxygen2)
document()
library(dplyr)
library(devtools)
library(roxygen2)
library(devtools)
install.packages("devtools")
library(devtools)
library(ps)
library(processx)
install.packages("ps")
library(devtools)
DMPC.FDR = function (physeq, pseudo.var, bootstrap, method.dist = "bray"){
split0 = DMPC::DMPC.split.by.variable(physeq, pseudo.var)
cc = sapply(split0, microbiome::prevalence)
vv = sort(sapply(cc, max))
max_cut = as.integer((vv[1] * 100) - 0.001)
cutoff = as.factor(seq(5, max_cut, by = 5))
bootstrap = bootstrap
FDR=NULL
physeq2 = physeq
for (c in cutoff) {
pvalue=NULL
tab=data.frame(replicate(bootstrap,sample(sample_data(physeq)[[pseudo.var]],rep = TRUE)))
rownames(tab) = phyloseq::sample_names(physeq)
sample_data(physeq2) = tab
df90.2 = as(sample_data(physeq2), "data.frame")
for (g in seq_len(ncol(sample_data(physeq2)))) {
split = list()
split = DMPC::DMPC.split.by.variable(physeq, pseudo.var)
varphy=lapply(split, function(y) microbiome::core(y,detection=0, prevalence=as.numeric(c)/100))
prev.cut = do.call(phyloseq::merge_phyloseq, varphy)
if (any(phyloseq::sample_sums(prev.cut) ==0) ==FALSE) {
merged = prev.cut
}
if ((phyloseq::taxa_are_rows(merged) == TRUE) == TRUE) {
otu = t(otu_table(merged))
} else {
otu = otu_table(merged) }
#gs <- as(phyloseq::sample_data(merged),"data.frame")
Variable = as.factor(df90.2[,g])
d = vegan::vegdist(otu, method = method.dist)
adonis = vegan::adonis(d ~ Variable, data = df90.2)
pvalue[[length(pvalue) + 1]]=adonis[[1]][[6]][[1]]
}
FDR[c]=rbind(length(which(pvalue<=0.05)))
FDRv=((FDR*100)/bootstrap)/100
print("FDR value", quote = FALSE)
print(FDRv)
}
finalFDR=as.data.frame(FDRv)
rownames(finalFDR)=paste(rownames(FDRv), "%", sep = "")
return(finalFDR)
}
library(DMPC)
DMPC.FDR(restroom, "Environment",bootstrap = 10)
library(phyloseq)
library(microbiome)
DMPC.FDR(restroom, "Environment",bootstrap = 10)
DMPC.FDR(restroom, "Environment",bootstrap = 10)
DMPC.FDR = function (physeq, pseudo.var, bootstrap, method.dist = "bray"){
split0 = DMPC::DMPC.split.by.variable(physeq, pseudo.var)
cc = sapply(split0, microbiome::prevalence)
vv = sort(sapply(cc, max))
max_cut = as.integer((vv[1] * 100) - 0.001)
cutoff = as.factor(seq(5, max_cut, by = 5))
bootstrap = bootstrap
FDR=NULL
physeq2 = physeq
for (c in cutoff) {
pvalue=NULL
tab=data.frame(replicate(bootstrap,sample(sample_data(physeq)[[pseudo.var]],rep = TRUE)))
rownames(tab) = phyloseq::sample_names(physeq)
sample_data(physeq2) = tab
df90.2 = as(sample_data(physeq2), "data.frame")
for (g in seq_len(ncol(sample_data(physeq2)))) {
split = list()
split = DMPC::DMPC.split.by.variable(physeq, pseudo.var)
varphy=lapply(split, function(y) microbiome::core(y,detection=0, prevalence=as.numeric(c)/100))
prev.cut = do.call(phyloseq::merge_phyloseq, varphy)
if (any(phyloseq::sample_sums(prev.cut) ==0) ==FALSE) {
merged = prev.cut
}
if ((phyloseq::taxa_are_rows(merged) == TRUE) == TRUE) {
otu = t(otu_table(merged))
} else {
otu = otu_table(merged) }
#gs <- as(phyloseq::sample_data(merged),"data.frame")
Variable = as.factor(df90.2[,g])
d = vegan::vegdist(otu, method = method.dist)
adonis = vegan::adonis(d ~ Variable, data = df90.2)
pvalue[[length(pvalue) + 1]]=adonis[[1]][[6]][[1]]
}
FDR[c]=rbind(length(which(pvalue<=0.05)))
FDRv=((FDR*100)/bootstrap)/100
print("FDR value", quote = FALSE)
print(FDRv)
}
finalFDR=as.data.frame(FDRv)
rownames(finalFDR)=paste(rownames(finalFDR), "%", sep = "")
return(finalFDR)
}
DMPC.FDR(restroom, "Environment",bootstrap = 10)
DMPC.FDR = function (physeq, pseudo.var, bootstrap, method.dist = "bray"){
split0 = DMPC::DMPC.split.by.variable(physeq, pseudo.var)
cc = sapply(split0, microbiome::prevalence)
vv = sort(sapply(cc, max))
max_cut = as.integer((vv[1] * 100) - 0.001)
cutoff = as.factor(seq(5, max_cut, by = 5))
bootstrap = bootstrap
FDR=NULL
physeq2 = physeq
for (c in cutoff) {
pvalue=NULL
tab=data.frame(replicate(bootstrap,sample(sample_data(physeq)[[pseudo.var]],rep = TRUE)))
rownames(tab) = phyloseq::sample_names(physeq)
sample_data(physeq2) = tab
df90.2 = as(sample_data(physeq2), "data.frame")
for (g in seq_len(ncol(sample_data(physeq2)))) {
split = list()
split = DMPC::DMPC.split.by.variable(physeq, pseudo.var)
varphy=lapply(split, function(y) microbiome::core(y,detection=0, prevalence=as.numeric(c)/100))
prev.cut = do.call(phyloseq::merge_phyloseq, varphy)
if (any(phyloseq::sample_sums(prev.cut) ==0) ==FALSE) {
merged = prev.cut
}
if ((phyloseq::taxa_are_rows(merged) == TRUE) == TRUE) {
otu = t(otu_table(merged))
} else {
otu = otu_table(merged) }
#gs <- as(phyloseq::sample_data(merged),"data.frame")
Variable = as.factor(df90.2[,g])
d = vegan::vegdist(otu, method = method.dist)
adonis = vegan::adonis(d ~ Variable, data = df90.2)
pvalue[[length(pvalue) + 1]]=adonis[[1]][[6]][[1]]
}
FDR[c]=rbind(length(which(pvalue<=0.05)))
FDRv=((FDR*100)/bootstrap)/100
print("FDR value", quote = FALSE)
print(FDRv)
}
finalFDR=as.data.frame(FDRv)
rownames(finalFDR)=paste("Prevalence",rownames(finalFDR), "%", sep = "")
return(finalFDR)
}
DMPC.FDR(restroom, "Environment",bootstrap = 10)
install.packages("knitr")
document()
document()
library(DMPC)
rm(DMPC.FDR())
rm(DMPC.FDR)
library(DMPC)
install.packages("markdown")
document()
library(devtools)
document()
library(DMPC)
library(markdown)
document()
library(DMPC)
library(DMPC)
library(devtools)
library(roxygen2)
library(knitr)
library(markdown)
document()
roxygenize()
library(DMPC)
devtools::load_all(".")
devtools::load_all(".")
roxygenise()
roxygenise()
use_readme_rmd()
use_readme_md()
